{"version":3,"sources":["Components/MainWeather.module.css","Components/MainWeather.jsx","Components/CurrentWeather.jsx","Pages/Index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainWeather","props","state","icon","temperature","weather","this","className","styles","mainWeatherContainer","mainWeatherIcon","mainWeatherData","dataTemperature","dataWeather","Component","CurrentWeather","Index","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,qBAAuB,0CAA0C,gBAAkB,qCAAqC,gBAAkB,qCAAqC,gBAAkB,qCAAqC,YAAc,mC,6MCEjPC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,EAAKF,MAAME,KACjBC,YAAa,EAAKH,MAAMG,YACxBC,QAAS,EAAKJ,MAAMI,SALL,E,qDAST,IAAD,EACgCC,KAAKJ,MAApCE,EADD,EACCA,YAAaC,EADd,EACcA,QAASF,EADvB,EACuBA,KAE9B,OACE,yBAAKI,UAAWC,IAAOC,sBACrB,yBAAKF,UAAWC,IAAOE,iBACrB,uBAAGH,UAAWJ,KAEhB,yBAAKI,UAAWC,IAAOG,iBACrB,0BAAMJ,UAAWC,IAAOI,iBAAkBR,EAA1C,QACA,0BAAMG,UAAWC,IAAOK,aAAcR,S,GApBPS,aCApBC,E,uKAEjB,OACE,kBAAC,EAAD,CAAaZ,KAAO,kBAAkBC,YAAc,KAAKC,QAAU,qB,GAH7BS,aCAvBE,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,W,GAJ2BF,aCOpBG,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5bdb225c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWeatherContainer\":\"MainWeather_mainWeatherContainer__2Oj0z\",\"mainWeatherIcon\":\"MainWeather_mainWeatherIcon__3Ro0x\",\"mainWeatherData\":\"MainWeather_mainWeatherData__2LIyK\",\"dataTemperature\":\"MainWeather_dataTemperature__2elUD\",\"dataWeather\":\"MainWeather_dataWeather__TLD2N\"};","import React, { Component } from 'react';\r\nimport styles from './MainWeather.module.css';\r\n\r\nexport default class MainWeather extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      icon: this.props.icon,\r\n      temperature: this.props.temperature,\r\n      weather: this.props.weather\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { temperature, weather, icon } = this.state;\r\n\r\n    return (\r\n      <div className={styles.mainWeatherContainer}>\r\n        <div className={styles.mainWeatherIcon}>\r\n          <i className={icon}></i>\r\n        </div>\r\n        <div className={styles.mainWeatherData}>\r\n          <span className={styles.dataTemperature}>{temperature}Â°</span>\r\n          <span className={styles.dataWeather}>{weather}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport MainWeather from './MainWeather';\r\n\r\nexport default class CurrentWeather extends Component {\r\n  render() {\r\n    return (\r\n      <MainWeather icon = \"wi wi-day-sunny\" temperature = \"21\" weather = \"Mostly Sunny\" />\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CurrentWeather from '../Components/CurrentWeather';\r\n\r\nexport default class Index extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CurrentWeather />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './css/weather-icons.min.css';\nimport Index from './Pages/Index';\n\nfunction App() {\n  return (\n    <Index />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}